/Users/jvill/Projects/venv/bin/Python /Users/jvill/Projects/cisc481_489/481_program1/hw1.py
================================================================================
iterative_deepening_search
len(pancake_lists) = 2253
Filename: /Users/jvill/Projects/cisc481_489/481_program1/hw1.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   166     16.5 MiB     16.5 MiB           1   @profile
   167                                         def iterative_deepening_search(initial_stack: List[int], goal_stack: List[int]) -> List[int]:
   168                                             """
   169                                             Takes an initial stack and a goal stack and produces a list of actions that
   170                                             form an optimal path from the initial stack to the goal.
   171                                             :param initial_stack: The base stack of pancakes.
   172                                             :param goal_stack: The goal stack of pancakes.
   173                                             :return: List of actions.
   174                                             """
   175     16.5 MiB      0.0 MiB           1       temp_state = Pancake(initial_stack, None, None)
   176     16.5 MiB      0.0 MiB           1       pancake_lists = expand(temp_state)
   177     16.5 MiB      0.0 MiB           1       max_depth = len(initial_stack)
   178     16.5 MiB      0.0 MiB           1       optimal = temp_state
   179
   180     16.5 MiB      0.0 MiB           1       checked = []
   181     16.5 MiB      0.0 MiB           1       keep_looking = True
   182     17.3 MiB      0.0 MiB         564       while keep_looking:
   183     17.3 MiB      0.0 MiB       14785           for stack in pancake_lists:
   184                                                     # no double checking, no too deep search
   185     17.3 MiB      0.0 MiB       14785               if (stack not in checked) and (stack.depth < max_depth):
   186     17.3 MiB      0.0 MiB         564                   checked.append(stack)
   187     17.3 MiB      0.0 MiB         564                   temp_state = stack
   188     17.3 MiB      0.0 MiB         564                   if temp_state.stack == goal_stack:
   189     17.3 MiB      0.0 MiB           1                       optimal = temp_state
   190     17.3 MiB      0.0 MiB           1                       max_depth = temp_state.depth
   191                                                             # break
   192     17.3 MiB      0.0 MiB         564                   if temp_state.depth < max_depth:
   193     17.3 MiB      0.9 MiB         563                       pancake_lists = expand(temp_state) + pancake_lists
   194     17.3 MiB      0.0 MiB         563                       break
   195     17.3 MiB      0.0 MiB           1                   print('len(pancake_lists) =', len(pancake_lists))
   196     17.3 MiB      0.0 MiB           1                   keep_looking = False
   197
   198     17.3 MiB      0.0 MiB           1       good_actions = []
   199     17.3 MiB      0.0 MiB           6       while optimal.parent is not None:
   200     17.3 MiB      0.0 MiB           5           good_actions.insert(0, optimal.action)
   201     17.3 MiB      0.0 MiB           5           optimal = optimal.parent
   202
   203     17.3 MiB      0.0 MiB           1       return good_actions
   204                                             """
   205                                             for cur_depth in range(0, sys.maxsize):
   206                                                 dls_result = depth_limited_search(initial_stack, goal_stack, cur_depth)
   207                                                 if dls_result == goal_stack:
   208                                                     return dls_result
   209                                             """
   210                                             # ==========================================================================
   211                                             # for i in range(25):
   212                                             #     if depth_limited_search(initial_stack, goal_stack, i):
   213                                             #         return True
   214                                             # return False
   215                                             # ==========================================================================
   216                                             # for cur_depth in range(0, sys.maxsize):
   217                                             #     dls_result = depth_limited_search(initial_stack, goal_stack, cur_depth)
   218                                             #     if dls_result == goal_stack:
   219                                             #         return dls_result


stack0 = [1, 3, 5, 2, 4, 6] stack0_goal = [1, 2, 3, 4, 5, 6] solution = [3, 5, 4, 3, 2]
================================================================================
breadth_first_search
pancake_lists = 796
Filename: /Users/jvill/Projects/cisc481_489/481_program1/hw1.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   275     17.1 MiB     17.1 MiB           1   @profile
   276                                         def breadth_first_search(initial_stack: List[int], goal_stack: List[int]) -> List[int]:
   277                                             """
   278                                             takes an initial stack and a goal and gives an optimal sequence of actions
   279                                             from the initial state to the goal.
   280                                             :param initial_stack:
   281                                             :param goal_stack:
   282                                             :return:
   283                                             """
   284     17.1 MiB      0.0 MiB           1       temp_state = Pancake(initial_stack, None, None)
   285     17.1 MiB      0.0 MiB           1       pancake_lists = [temp_state]
   286     17.1 MiB      0.0 MiB           1       checked = []
   287     17.3 MiB      0.0 MiB           7       while temp_state.stack != goal_stack:
   288     17.3 MiB      0.0 MiB           6           search_next = []  # stop double searches
   289     17.3 MiB      0.0 MiB         600           for pancake_looper in pancake_lists:
   290     17.3 MiB      0.0 MiB         595               if pancake_looper.stack not in checked:
   291     17.3 MiB      0.0 MiB         391                   temp_state = pancake_looper
   292     17.3 MiB      0.0 MiB         391                   if temp_state.stack == goal_stack:
   293     17.3 MiB      0.0 MiB           1                       print('pancake_lists =', len(pancake_lists))
   294     17.3 MiB      0.0 MiB           1                       break
   295     17.3 MiB      0.2 MiB         390                   more_temp_state = expand(temp_state)
   296     17.3 MiB      0.0 MiB         390                   search_next = search_next + more_temp_state
   297     17.3 MiB      0.0 MiB         390                   checked.append(pancake_looper.stack)
   298     17.3 MiB      0.0 MiB           6           pancake_lists = list(set(search_next)) # remove duplicated
   299     17.3 MiB      0.0 MiB           1       ze_actions = []
   300     17.3 MiB      0.0 MiB           6       while temp_state.parent is not None:
   301     17.3 MiB      0.0 MiB           5           ze_actions.insert(0, temp_state.action)
   302     17.3 MiB      0.0 MiB           5           temp_state = temp_state.parent
   303     17.3 MiB      0.0 MiB           1       return ze_actions


stack0 = [1, 3, 5, 2, 4, 6] stack0_goal = [1, 2, 3, 4, 5, 6] solution = [3, 5, 4, 3, 2]
================================================================================
a_star_search
pancake_lists = 70
Filename: /Users/jvill/Projects/cisc481_489/481_program1/hw1.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   329     17.3 MiB     17.3 MiB           1   @profile
   330                                         def a_star_search(initial_stack: List[int], goal_stack: List[int]) -> List[int]:
   331                                             """
   332                                             Similar to breadth-first and iterative deepening, your A* search should take
   333                                             as input an initial stack and a goal stack. It should additionally take a
   334                                             heuristic function
   335
   336                                             You can test your code by passing as the heuristic a function that always
   337                                             returns, which should reduce your search to uniform-cost search. Test it on
   338                                             *stack-0*. You can also try it on *stack-1* for good measure. It may take a
   339                                             long time to solve any of the other.
   340                                             :param initial_stack:
   341                                             :param goal_stack:
   342                                             :return:
   343                                             """
   344     17.3 MiB      0.0 MiB           1       temp_state = a_star_heuristic(Pancake(initial_stack, None, None))
   345     17.3 MiB      0.0 MiB           1       pancake_lists = []
   346     17.3 MiB      0.0 MiB          24       while temp_state.stack != goal_stack:
   347     17.3 MiB      0.0 MiB          23           temp_list = []
   348     17.3 MiB      0.0 MiB         116           for pancake in expand(temp_state):
   349     17.3 MiB      0.0 MiB          93               temp_list.append(a_star_heuristic(pancake))
   350
   351     17.3 MiB      0.0 MiB          23           if temp_state.depth < len(initial_stack):
   352     17.3 MiB      0.0 MiB          23               pancake_lists = pancake_lists + temp_list
   353     17.3 MiB      0.0 MiB          23               pancake_lists.sort(key=sort_pancake_cost)
   354
   355     17.3 MiB      0.0 MiB          23               temp_state = pancake_lists[0]
   356     17.3 MiB      0.0 MiB          23               pancake_lists.pop(0)
   357                                                 else:
   358                                                     temp_state = pancake_lists[0]
   359     17.3 MiB      0.0 MiB           1       print('pancake_lists =', len(pancake_lists))
   360     17.3 MiB      0.0 MiB           1       ze_actions = []
   361     17.3 MiB      0.0 MiB           7       while temp_state.parent is not None:
   362     17.3 MiB      0.0 MiB           6           ze_actions.insert(0, temp_state.action)
   363     17.3 MiB      0.0 MiB           6           temp_state = temp_state.parent
   364     17.3 MiB      0.0 MiB           1       return ze_actions


stack0 = [1, 3, 5, 2, 4, 6] stack0_goal = [1, 2, 3, 4, 5, 6] solution = [3, 4, 2, 5, 2, 5]
Filename: /Users/jvill/Projects/cisc481_489/481_program1/hw1.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   367     16.5 MiB     16.5 MiB           1   @profile
   368                                         def main():
   369     16.5 MiB      0.0 MiB           1       print('=' * 80)
   370     16.5 MiB      0.0 MiB           1       print('iterative_deepening_search')
   371     17.1 MiB      0.6 MiB           1       solution = iterative_deepening_search(stack0, stack0_goal)
   372     17.1 MiB      0.0 MiB           2       print('stack0 =', stack0, 'stack0_goal =', stack0_goal, 'solution =',
   373     17.1 MiB      0.0 MiB           1           solution)
   374                                             """
   375                                             for s in stacks1_7:
   376                                                 solution = iterative_deepening_search(stacks1_7[s], stack1_7_goals)
   377                                                 print(
   378                                                     'stack =', s,
   379                                                     'initial_stack =',
   380                                                     stacks1_7[s],
   381                                                     'goal_stack =',
   382                                                     stack1_7_goals,
   383                                                     'solution =',
   384                                                     solution
   385                                                 )
   386                                             """
   387     17.1 MiB      0.0 MiB           1       print('=' * 80)
   388     17.1 MiB      0.0 MiB           1       print('breadth_first_search')
   389     17.3 MiB      0.2 MiB           1       solution = breadth_first_search(stack0, stack0_goal)
   390     17.3 MiB      0.0 MiB           2       print('stack0 =', stack0, 'stack0_goal =', stack0_goal, 'solution =',
   391     17.3 MiB      0.0 MiB           1             solution)
   392                                             # solution = breadth_first_search(stack1, stack1_7_goals)
   393                                             # print('stack1 =', stack1, 'stack1_goal =', stack1_7_goals, 'solution =',
   394                                             #      solution)
   395     17.3 MiB      0.0 MiB           1       print('=' * 80)
   396     17.3 MiB      0.0 MiB           1       print('a_star_search')
   397     17.3 MiB      0.0 MiB           1       solution = a_star_search(stack0, stack0_goal)
   398     17.3 MiB      0.0 MiB           2       print('stack0 =', stack0, 'stack0_goal =', stack0_goal, 'solution =',
   399     17.3 MiB      0.0 MiB           1             solution)



Process finished with exit code 0
